<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="schema.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>